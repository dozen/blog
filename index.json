[{"content":"\n\ncgiカウンターとか懐かしくないですか?\n\n```\n#!/bin/sh\n\nfile=\"count.log\"\nlockfile=\"counter.lock\"\nsleeptime=0\n\nwhile :\ndo\n  #ロック\n  mktemp $lockfile 1\u003e /dev/null 2\u003e/dev/null\n  result=$?\n\n  #ロック出来てたらカウンタを進める\n  if [ $result -eq 0 ]; then\n    count=$((`cat $file` + 1))\n    echo $count \u003e count.log\n    #ロック開放\n    rm $lockfile\n    break\n  fi\n\n  sleeptime=$(($sleeptime + 1))\n  sleep \"0.00\"$sleeptime\ndone\n\necho $count\n```\n\n`count.log` というファイルを置いておけばカウンタとして動作します．ロックには `mktemp` を使いましたが `mkdir` とかでもいいはず．\n\nロックされてたら一定時間待つようにしていますが，ちょっと手抜きすぎるかも．\n","cover":"","link":"2016/08/22.html","preview":"cgiカウンターとか懐かしくないですか?","title":"shell scriptでcgiカウンター"},{"content":"\n\ndstatでcpu使用率, メモリ, スワップ, ネットワークi/o, ディスクi/oなどを取得してfluentdでelasticsearchに投げつけるというものです.\n\nそれをkibanaで視覚化します. elasticsearch + kibana + fluentd + dstatのやり方については他に紹介してるwebサイトがたくさんあるので割愛します.\n\ndstatだかfluentdのdstatプラグインの仕様が変わっているだかで, 参考にしたwebサイトの設定ファイルでは動きませんでした. ということで修正した `fluentd.conf` を紹介します.\n\n## fluent.conf\n\n``` text\n\u003csource\u003e\n  type config_expander\n  \u003cconfig\u003e\n    type dstat\n    tag host.dstat.__hostname__\n    option  -tclmsgr -dd sda,sdb --disk-util -nn eth0\n    delay 10\n  \u003c/config\u003e\n\u003c/source\u003e\n\n\u003cmatch host.dstat.**\u003e\n  type copy\n  \u003cstore\u003e\n    type map\n    map '[\"map.\" + tag + \".cpu_usr\", time , \"cpu_usr\" =\u003e record[\"dstat\"][\"total_cpu_usage\"][\"usr\"]]'\n  \u003c/store\u003e\n  \u003cstore\u003e\n    type map\n    map '[\"map.\" + tag + \".cpu_sys\", time , \"cpu_sys\" =\u003e record[\"dstat\"][\"total_cpu_usage\"][\"sys\"]]'\n  \u003c/store\u003e\n  \u003cstore\u003e\n    type map\n    map '[\"map.\" + tag + \".cpu_idl\", time , \"cpu_idl\" =\u003e record[\"dstat\"][\"total_cpu_usage\"][\"idl\"]]'\n  \u003c/store\u003e\n  \u003cstore\u003e\n    type map\n    map '[\"map.\" + tag + \".cpu_wai\", time , \"cpu_wai\" =\u003e record[\"dstat\"][\"total_cpu_usage\"][\"wai\"]]'\n  \u003c/store\u003e\n   \u003cstore\u003e\n    type map\n    map '[\"map.\" + tag + \".cpu_hiq\", time , \"cpu_hiq\" =\u003e record[\"dstat\"][\"total_cpu_usage\"][\"hiq\"]]'\n  \u003c/store\u003e\n  \u003cstore\u003e\n    type map\n    map '[\"map.\" + tag + \".cpu_siq\", time , \"cpu_siq\" =\u003e record[\"dstat\"][\"total_cpu_usage\"][\"siq\"]]'\n  \u003c/store\u003e\n  \u003cstore\u003e\n    type map\n    map '[\"map.\" + tag + \".loadavg_1m\", time , \"loadavg_1m\" =\u003e record[\"dstat\"][\"load_avg\"][\"1m\"]]'\n  \u003c/store\u003e\n  \u003cstore\u003e\n    type map\n    map '[\"map.\" + tag + \".mem_used\", time , \"mem_used\" =\u003e record[\"dstat\"][\"memory_usage\"][\"used\"]]'\n  \u003c/store\u003e\n  \u003cstore\u003e\n    type map\n    map '[\"map.\" + tag + \".mem_buff\", time , \"mem_buff\" =\u003e record[\"dstat\"][\"memory_usage\"][\"buff\"]]'\n  \u003c/store\u003e\n  \u003cstore\u003e\n    type map\n    map '[\"map.\" + tag + \".mem_cache\", time , \"mem_cache\" =\u003e record[\"dstat\"][\"memory_usage\"][\"cach\"]]'\n  \u003c/store\u003e\n  \u003cstore\u003e\n    type map\n    map '[\"map.\" + tag + \".mem_free\", time , \"mem_free\" =\u003e record[\"dstat\"][\"memory_usage\"][\"free\"]]'\n  \u003c/store\u003e\n  \u003cstore\u003e\n    type map\n    map '[\"map.\" + tag + \".io_sda_read\", time , \"io_sda_read\" =\u003e record[\"dstat\"][\"io/sda\"][\"read\"]]'\n  \u003c/store\u003e\n  \u003cstore\u003e\n    type map\n    map '[\"map.\" + tag + \".io_sda_write\", time , \"io_sda_write\" =\u003e record[\"dstat\"][\"io/sda\"][\"writ\"]]'\n  \u003c/store\u003e\n  \u003cstore\u003e\n    type map\n    map '[\"map.\" + tag + \".io_sdb_read\", time , \"io_sdb_read\" =\u003e record[\"dstat\"][\"io/sdb\"][\"read\"]]'\n  \u003c/store\u003e\n  \u003cstore\u003e\n    type map\n    map '[\"map.\" + tag + \".io_sdb_write\", time , \"io_sdb_write\" =\u003e record[\"dstat\"][\"io/sdb\"][\"writ\"]]'\n  \u003c/store\u003e\n  \u003cstore\u003e\n    type map\n    map '[\"map.\" + tag + \".dsk_sda_read\", time , \"dsk_sda_read\" =\u003e record[\"dstat\"][\"dsk/sda\"][\"read\"]]'\n  \u003c/store\u003e\n  \u003cstore\u003e\n    type map\n    map '[\"map.\" + tag + \".dsk_sda_write\", time , \"dsk_sda_write\" =\u003e record[\"dstat\"][\"dsk/sda\"][\"writ\"]]'\n  \u003c/store\u003e\n  \u003cstore\u003e\n    type map\n    map '[\"map.\" + tag + \".dsk_sdb_read\", time , \"dsk_sdb_read\" =\u003e record[\"dstat\"][\"dsk/sdb\"][\"read\"]]'\n  \u003c/store\u003e\n  \u003cstore\u003e\n    type map\n    map '[\"map.\" + tag + \".dsk_sdb_write\", time , \"dsk_sdb_write\" =\u003e record[\"dstat\"][\"dsk/sdb\"][\"writ\"]]'\n  \u003c/store\u003e\n  \u003cstore\u003e\n    type map\n    map '[\"map.\" + tag + \".sda_util\", time , \"sda_util\" =\u003e record[\"dstat\"][\"sda\"][\"util\"]]'\n  \u003c/store\u003e\n  \u003cstore\u003e\n    type map\n    map '[\"map.\" + tag + \".paging_in\", time, \"paging_in\" =\u003e record[\"dstat\"][\"paging\"][\"in\"]]'\n  \u003c/store\u003e\n  \u003cstore\u003e\n    type map\n    map '[\"map.\" + tag + \".paging_out\", time, \"paging_out\" =\u003e record[\"dstat\"][\"paging\"][\"out\"]]'\n  \u003c/store\u003e\n  \u003cstore\u003e\n    type map\n    map '[\"map.\" + tag + \".swap_used\", time, \"swap_used\" =\u003e record[\"dstat\"][\"swap\"][\"used\"]]'\n  \u003c/store\u003e\n  \u003cstore\u003e\n    type map\n    map '[\"map.\" + tag + \".net_eth0_recv\", time , \"net_eth0_recv\" =\u003e record[\"dstat\"][\"net/eth0\"][\"recv\"]]'\n  \u003c/store\u003e\n  \u003cstore\u003e\n    type map\n    map '[\"map.\" + tag + \".net_eth0_send\", time , \"net_eth0_send\" =\u003e record[\"dstat\"][\"net/eth0\"][\"send\"]]'\n  \u003c/store\u003e\n\u003c/match\u003e\n\n\u003cmatch map.host.dstat.**\u003e\n  type record_reformer\n  enable_ruby true\n  tag  timeadd.map.host.dstat\n  \u003crecord\u003e\n    hostname ${tag_parts[3]}\n  \u003c/record\u003e\n\u003c/match\u003e\n\n\u003cmatch timeadd.map.host.dstat.**\u003e\n  type typecast\n  item_types cpu_usr:float,cpu_sys:float,cpu_idl:float,cpu_wai:float,cpu_hiq:float,cpu_siq:float,loadavg_1m:float,mem_used:integer,mem_free:integer,mem_cache:integer,mem_buff:integer,io_sda_read:float,io_sda_write:float,io_sdb_read:float,io_sdb_write:float,dsk_sda_read:float,dsk_sda_write:float,dsk_sdb_read:float,dsk_sdb_write:float,sda_util:float,paging_in:float,paging_out:float,swap_used:integer,net_eth0_recv:float,net_eth0_send:float\n  tag  typecast.timeadd.map.host.dstat\n\u003c/match\u003e\n\n\u003cmatch typecast.timeadd.map.host.dstat.**\u003e\n  type elasticsearch\n  type_name       dstat\n  host            localhost\n  port            9200\n  logstash_format true\n  logstash_prefix logstash\n  flush_interval  10s\n\u003c/match\u003e\n```\n\n## ダッシュボード\n良い感じですがelasticsearchとkibanaはどちらもめちゃくちゃメモリを食います. 🐘\n\n![kibana](/images/2016-06/26-kibana_screen_shot.png \"kibana\")\n\n","cover":"","link":"2016/06/26.html","preview":"fluentdの設定ファイルを他所から丸パクリしたら動かなかった","title":"elasticsearch + kibanaでサーバのリソース監視"},{"content":"\n\nsoftetherの転送量をmuninでグラフ化する\u003ca href=\"https://github.com/dozen/softether-munin\" target=\"_blank\"\u003esoftether-plugin\u003c/a\u003eを作りました.\n\n今回は `plugin::munin`, `plugin::munin::framework` を使いましたが, これらのモジュールを使った自作プラグインの作り方について解説しているサイトが全然見つからなかったので, 紹介します.\n\n情報少ないしこのモジュールはmunin v2.1以上じゃないと動かないし, 後述する `negative` を指定したグラフがたまにうまく描画できなかったりと, プラグインの作成方法としては結構微妙であることを先に書いておきます.\n\n## plugin::munin::frameworkについて\nsoftether-pluginはplugin::munin::frameworkというモジュールを使っていますが, これについての詳細はよくわかりません.\nというのも, このプラグインを書いたのは1年前で, 当時参考にしていたwebサイトが見つからなかったからです.\n\nmunin公式のプラグインで使われているようですがとにかくweb上に情報が載ってないです.\nmunin 2.1.9-1では少なくともmunin公式のプラグインで `munin::plugin` , `munin::plugin::framework` が使われています.\nしかし munin 2.0.25 ではそのようなプラグインは使用されておらず, またそれらを使ったプラグインは動きません. cpanにはこの2つのモジュールは無かったので, これらのモジュールを使いたい場合は対応したバージョンのmuninをインストールするしかなさそうです.\n\nそんなよくわからないものを使って大丈夫なのかよという感じですが, 動くし, 簡単にプラグインが書けるっぽいのでよしとします.\n\n## 自作プラグインで実現したいこと\nプラグインを自作する上で実現したいのは以下の3つです.\n\n1. softether_myhub のようなシンボリックリンクを張るとmyhubのグラフを作ってくれる\n1. softetherのホスト名とかhubのパスワードはmunin-node.conf.d/munin-nodeにかける\n1. virtual hub単位で転送量, パケット数をグラフ化\n\nグラフ化できることはもちろんですが, muninのプラグインらしく, シンボリックリンクで監視対象のデバイスを指定したり, munin-node.conf.d/munin-node に書いたconfigが読めるようにしたいです.\n\n## プラグインの作成\nsoftether-muninのソースコードを使って解説していきます.\n\n### シンボリックリンク名でvirtual hubを指定\nmuninのプラグインでありがちな, 実体が `if_` というファイルで `if_eth0` というシンボリックリンクを張るとeth0についてのグラフを作成する, というのを真似したい.\n\nプラグイン `softether_` のシンボリックリンク名を読み取る部分はこうなります.\n\n``` perl\nmy $hub;\n\nif ($0 =~ /softether_([\\w\\d#-_.\u0026]+)$/) {\n  $hub = $1;\n} else {\n  die (\"can't run config without a symlinked name\");\n}\n```\n\nこれで `softether_myhub` というシンボリックリンクを張れば `$hub` に `myhub` が入り, あとで好きに使えます.\n\n### munin-node.conf.dにあるconfigを読み込む\nホスト名, パスワード, vpncmdのパスを設定ファイルから読み込めるようにします.\n\nソースコードはこんな感じです.\n\n``` perl\nunless (defined $env{host}) {\n  $env{host} = \"localhost\";\n}\n\nunless (defined $env{password}) {\n  die (\"please set password\");\n}\n\nunless (defined $env{vpncmdpath}) {\n  $env{vpncmdpath} = \"/usr/local/vpnserver/vpncmd\";\n}\n```\n\n対応するmunin-node.conf.dの設定は以下のようになります\n\n```\n[softether_*]\nenv.password myvpnpassword\nenv.host localhost\nenv.vpncmdpath /usr/local/vpnserver/vpncmd\n```\n\nホスト名とvpncmdのパスはデフォルト値をプラグインのソースコードで指定しているので, 設定ファイルには書かなくても動きます.\n設定ファイルに `env.password` と書いた場合はperlの場合だと `$env{password}` みたいな感じでアクセスできるみたいです.\n\n### 値の取得とか, 描画したいグラフの設定\n\n``` perl\nmy @item_key = (\n\"outgoing unicast packets\",\n\"outgoing unicast total size\",\n\"outgoing broadcast packets\",\n\"outgoing broadcast total size\",\n\"incoming unicast packets\",\n\"incoming unicast total size\",\n\"incoming broadcast packets\",\n\"incoming broadcast total size\",\n);\n\nmy $result = `$env{vpncmdpath} $env{host} /server /password:$env{password} /hub:$hub /cmd statusget`;\n\nmy %data;\n\nsub get_value {\n  my $tmp;\n  my $key = shift;\n  if ($result =~ /$key\\s*\\|([0-9,]+)/) {\n    $tmp = $1;\n    $tmp =~ s/,//g;\n    return $tmp;\n  }\n}\n\nfor my $item (@item_key) {\n  $data{$item} = get_value($item);\n}\n```\n\nこんな感じです.  `$result` には以下のような結果が入るので, 欲しい値を `@item_key` に登録しておいて取って来ています\n\n```\nstatusget\nvpncmd command - softether vpn command line management utility\nsoftether vpn command line management utility (vpncmd command)\nversion 4.19 build 9605   (english)\ncompiled 2016/03/06 21:09:57 by yagi at pc30\ncopyright (c) softether vpn project. all rights reserved.\n\nconnection has been established with vpn server \"localhost\" (port 443).\n\nyou have administrator privileges for virtual hub 'vpn' on the vpn server.\n\nvpn server/vpn\u003estatusget\nstatusget command - get current status of virtual hub\nitem                         |value\n-----------------------------+---------------------\nvirtual hub name             |vpn\nstatus                       |online\ntype                         |standalone\nsecurenat                    |enabled\nsessions                     |2\nsessions (client)            |1\nsessions (bridge)            |0\naccess lists                 |0\nusers                        |1\ngroups                       |0\nmac tables                   |3\nip tables                    |3\nnum logins                   |54\nlast login                   |2016-06-25 19:12:43\nlast communication           |2016-06-25 21:22:15\ncreated at                   |2016-04-04 00:12:46\noutgoing unicast packets     |157,138,736 packets\noutgoing unicast total size  |133,078,817,603 bytes\noutgoing broadcast packets   |477,735 packets\noutgoing broadcast total size|31,355,040 bytes\nincoming unicast packets     |157,166,519 packets\nincoming unicast total size  |133,081,898,141 bytes\nincoming broadcast packets   |2,833,614 packets\nincoming broadcast total size|174,223,220 bytes\nthe command completed successfully.\n```\n\n### munin::plugin::framework でグラフ作成\nmuninのプラグインは引数にconfを渡した時はグラフの設定を吐かないといけなかったりとか色々あるんですが, そのへんをよしなにやってくれるのが `munin::plugin::framework` です. だと思います.\n\nこれを使えば設定ファイルを書くイメージでサクサクっとプラグインを作れます.\n\n``` perl\nmy $plugin = munin::plugin::framework-\u003enew;\n\n$plugin-\u003eadd_graphs(\n  packets =\u003e {\n    args =\u003e \"\",\n    category =\u003e $category,\n    info =\u003e \"$hub packets\",\n    title =\u003e \"$hub packets\",\n    vlabel =\u003e \"in (-) | out (+) packets / second\",\n    fields =\u003e {\n      unicast_out =\u003e {\n        label =\u003e \"unicast\",\n\ttype =\u003e \"derive\",\n\tmin =\u003e 0,\n\tnegative =\u003e \"unicast_in\",\n\tvalue =\u003e $data{\"outgoing unicast packets\"}\n      },\n      unicast_in =\u003e {\n        type =\u003e \"derive\",\n\tmin =\u003e 0,\n\tvalue =\u003e  $data{\"incoming unicast packets\"}\n      }\n    }\n  },\n  unicast_total_packets =\u003e {\n    args =\u003e \"\",\n    category =\u003e $category,\n    info =\u003e \"$hub unicast toatl packets\",\n    title =\u003e \"$hub unicast total packets\",\n    vlabel =\u003e \"packets\",\n    fields =\u003e {\n      incoming =\u003e {\n        label =\u003e \"incoming\",\n        type =\u003e \"gauge\",\n        min =\u003e 0,\n        value =\u003e $data{\"incoming unicast packets\"}\n      },\n      outgoing =\u003e {\n        label =\u003e \"outgoing\",\n        type =\u003e \"gauge\",\n        draw =\u003e \"area\",\n        min =\u003e 0,\n        value =\u003e $data{\"outgoing unicast packets\"}\n      }\n    }\n  }\n);\n\n$plugin-\u003erun();\n```\n\nこんな感じで `add_graphs()` でどんどん追加していくだけ.\nカテゴリは `softether` とかにしてます.\n\n- args: グラフの下限値, 上限値, 対数スケールでプロット などを指定するところ\n- category: [ disk munin network processes system time ]みたいなの, あれです. すでにあるものに追加したりとか, `softether` みたいに新しいカテゴリを作ることも出来ます\n- vlabel: グラフの縦軸の表示名.\n- fields: 描画したいデータについて記述する\n  - type: `derive` だと前の値との差, `gauge` だと値をそのまま出力\n  - negative: nicのスループットとかのグラフでoutが上方向, inが下方向にグラフが伸びてますが, あれを実現するためのものです. `negative` に指定したキーのフィールドがマイナス方向に描画されるようになります.\n\nだいたいこんな感じなんですが, `munin::plugin::framework` で `negative` を指定するとたまーにグラフの生成に失敗します.\nrrdtoolがエラーを吐いてますが, 原因はよくわかりません. この辺はちょっと微妙な感じですね.\n`negative` を使わなければいいんですがsoftetherプラグインでグラフ化したいものはおおかたin/outがあるのでoutを上方向, inを下方向に伸ばすグラフのほうがしっくり来ますし.\n\n### プラグインの全体図, 生成されるグラフ\n\u003ca href=\"https://github.com/dozen/softether-munin\" target=\"_blank\"\u003egithub\u003c/a\u003eを見てください. 🐘\n","cover":"","link":"2016/06/25.html","preview":"plugin::munin, plugin::munin::frameworkを使ってmunin pluginを自作する","title":"munin pluginの作成"},{"content":"\n\n## inkpaperの使い方\n[inkpaperのreadme](https://github.com/inkproject/ink#introduce)を読めばだいたい分かる.\n\n### inkpaperをインストール\n[http://www.inkpaper.io/](http://www.inkpaper.io/)から自分の環境に合ったものをダウンロードします. zipファイルを解凍すればインストールは完了です.\n\n### 設定ファイルを編集する\n`blog/config.yml`を編集します.\n\n```\nsite:\n    title: ジェット・ゾウ #ブログのタイトル\n    subtitle: サブタイトル #タイトルの下にチョロンと表示されます\n    # logo: /images/avatar.jpg #トップページに表示される自分のアイコン\n    limit: 10 \n    theme: theme\n    disqus: somebody\n    lang: en\n    url: http://jetzou.com/\n    # root: /blog\n\nauthors:\n    me:\n        name: dozen\n        intro: どぜんと読みます\n        avatar: /images/avatar.jpg\n\nbuild:\n    port: 8000\n    # copied files to public folder when build\n    copy:\n        - theme/bundle\n        - theme/favicon.ico\n        - theme/robots.txt\n        - source/images\n    # excuted command when use 'ink publish'\n    publish: |\n        git add . -a\n        git commit -m \"update\"\n        git push origin\n```\n\n`url`と`root`だけ気をつければあとは適当で大丈夫. 今回は`http://jetzou.com/`で公開したいので`url: http://jetzou.com/\"`としました. `disqus`はコメント機能を提供してくれるdisqusのアカウントを指定するんですが, 今回はスキップ.\n\n`lang`は今のところ中国語と英語にしか対応していないみたいなので, `en`を指定しました.\n\n設定ファイルはこんな感じで大丈夫そうです.\n\n### 記事を書く\n記事を置く場所は`blog/source`です.\n\nインストールした状態ではサンプルページの`blog/source/ink-blog-tool-en.md`と`blog/source/ink-blog-tool.md`があります. 記事を書くまえにこのファイルをみて, 参考にするといいです. 公開する前にこの2つのファイルは消しておきます.\n\n```\ntitle: article title\ndate: year-month-day hour:minute:second #created time，support timezone, such as \" +0800\"\nupdate: year-month-day hour:minute:second #updated time，optional，support timezone, such as \" +0800\"\nauthor: authorid\ncover: article cover path #optional\ndraft: false #if draft，optional\ntop: false #place article to top, optional\npreview: article preview，also use \u003c!--more--\u003e to split in body #optional\ntags: #optional\n    - tag1\n    - tag2\n\n---\n\nmarkdown format's body\n```\n\n`date`は投稿日時, `update`は更新日時です. `update`は不要ですが`date`は必須です. トップページなどを生成する際に`date`をもとに記事をソートするためです. フォーマットは`2016-06-01 12:00:00`みたいな感じです. ちゃんと秒まで指定しないとエラーが出ます.\n\n`author`は`blog/config.yml`で指定した`authors`を指定します. デフォルトだと`me`です. \n\n`cover`はよくわかんないです. アイキャッチかな?\n\n`draft: true`を追加すると書きかけの記事とみなされて, ページが生成されません.\n\n`top: true`とすると, トップページの一番上に張り付く記事になるみたいです. 使ったこと無いからわからないけど.\n\n`preview`はトップページで表示される記事の概要を指定します. これを指定せずに, 記事の本体の適当な場所に`\u003c!--more--\u003e`を置くとその部分までを記事の概要として表示してくれます. ただし, markdownを処理してくれないので`\u003c!--more--\u003e`は使わずに, `preview`を指定することをおすすめします.\n\n`tags`で`pc`とか`食べ物`とか指定してあげるとタグごとのアーカイブページとか作ってくれます.\n\n以上が記事の情報です. `---`より下が本文となります. ここから下はmarkdown記法が使えます.\n\nこれを踏まえると一番簡単な書式はこうなります.\n\n```\ntitle: タイトル\ndate: 2016-06-05 7:00:00\npreview: テストです\n\n---\n\nテスト\n```\n\nこれを`blog/source`の下に置いて, ファイル名を`タイトル.md`などとして保存してもいいのですが, それだと今後記事が増えた時にひっちゃかめっちゃかになる可能性が高いです.\n\nそこで, `blog/source/年/月/日`というふうにサブディレクトリを作るのがおすすめです. サブディレクトリを作っても記事のuriには何の影響も出ないので, 好きなように変更できます. 私は今のところ`blog/source/年/月`くらいにしてます.\n\n### ちゃんと生成されてるかチェックする\n記事を書いたら, ちゃんとページが生成されるかテストしてみます. `./ink preview`というコマンドを実行することで, ページを生成して簡易的なサーバが起動します. `http://localhost:8000`でアクセスできます. ポート番号が8000だと都合がわるい場合は`blog/config.yml`で変更します.\n\n### テーマを修正する\nブログが生成されているかチェックすると, あることに気づきます. 投稿した時刻がおかしいんです. 設定ファイルで英語を指定したはずなのに,`分钟前`とか表示されます. どうもこの投稿時刻の表示はjavascriptで行われており, ここだけ言語の設定が反映されないみたいです.\n\n#### まじめに直す\nテーマは`blog/theme`にあり, 編集すべきファイルは`blog/theme/source/index.coffee`です.\n\n```\ntimesince = (date) -\u003e\n\n    seconds = math.floor((new date() - date) / 1000)\n    interval = math.floor(seconds / 31536000)\n    if interval \u003e 1\n        return interval + \"年前\"\n    interval = math.floor(seconds / 2592000)\n    if interval \u003e 1\n        return interval + \"个月前\"\n    interval = math.floor(seconds / 86400)\n    if interval \u003e 1\n        return interval + \"天前\"\n    interval = math.floor(seconds / 3600)\n    if interval \u003e 1\n        return interval + \"小时前\"\n    interval = math.floor(seconds / 60)\n    if interval \u003e 1\n        return interval + \"分钟前\"\n    return math.floor(seconds) + \"秒前\"\n```\n\nこんな記述があるので, 以下のように変更します.\n\n```\ntimesince = (date) -\u003e\n\n    seconds = math.floor((new date() - date) / 1000)\n    interval = math.floor(seconds / 31536000)\n    if interval \u003e 1\n        return interval + \"年前\"\n    interval = math.floor(seconds / 2592000)\n    if interval \u003e 1\n        return interval + \"ヶ月前\"\n    interval = math.floor(seconds / 86400)\n    if interval \u003e 1\n        return interval + \"日前\"\n    interval = math.floor(seconds / 3600)\n    if interval \u003e 1\n        return interval + \"時間前\"\n    interval = math.floor(seconds / 60)\n    if interval \u003e 1\n        return interval + \"分前\"\n    return math.floor(seconds) + \"秒前\"\n```\n\n編集が終わったら, webpackを実行します.\n\n`blog/theme`に移動して, 以下のコマンドを実行します.\n\n```\nnpm install\n\n./node_modules/webpack/bin/webpack.js\n```\n\n次に`ink`とか`blog`があるディレクトリに戻って, `./ink preview`を実行して確認してください. `10分前`みたいなかんじになっているはずです.\n\n#### 適当に直す\nnodeとか入れてないしjsファイル直接編集するだけでいいでしょ, って言う方はこっちで.\n\n`blog/theme/bundle/index.js`の1行目に, `个月前`とか`天前`とか書いてある部分があるはずなので, 修正します.\n\n`./ink preview` で変更が反映されていることを確認します.\n\n### コマンドまとめ\n記事を書いたら`./ink preview`で確認して, `./ink publish`でgithubにプッシュ, という流れになります. `./ink build`はテーマからcssやjsファイルをコピーしてくるコマンドですが, `preview`や`publish`のときにこのコマンドが走っているみたいなので自分で実行する必要がなく, 余り使いません\n\n\n## github pagesの使い方\n[https://help.github.com/categories/github-pages-basics/](https://help.github.com/categories/github-pages-basics/)を読めばだいたい分かる.\n\n### リポジトリの作成とcnameの設定\ngithubで`blog`とか適当な名前のリポジトリを作ります. そうしたら, `blog`ディレクトリに移動して先ほど作ったリポジトリをcloneします. 次に`blog/public`を削除し, cloneしたリポジトリのを`public`にリネームします. リネームしたら`git checkout -b gh-pages`を実行します.\n\n`blog/public/cname`ファイルを作成し, 使用するドメインをファイルの1行目に書き込みます. `jetzou.com`とか, `blog.jetzou.com`みたいな感じです. 書き込んだら, `git add cname`, `git commit -m \"add cname\"`というふうにcnameファイルを追加し,コミットしてください. \n\nコミットしたら, `git push --set-upstream origin gh-pages` を実行しておきます.\n\ncustom domainを使わずに`dozen.github.io/blog`みたいな感じで使う人は`cname`ファイルの設定は不要です.\n\n### dnsの設定\ncustom domain使う人だけが必要な設定です. [https://help.github.com/articles/setting-up-an-apex-domain/\u003cpaste\u003e](https://help.github.com/articles/setting-up-an-apex-domain/)ここを参考にします.\n\n参考にするページにも書いてありますが, cnameレコードは使わないようにします. で, 今回はalias, anameレコード非対応のdnsサービスを利用するため, aレコードを使った設定をします.\n\ndnsに`192.30.252.153`と`192.30.252.154`のaレコードを追加すればいいっぽいので, 追加します.\n\n### inkpaperの設定ファイルを修正する\n`blog/config.yml`の`utl`を変更します. 必要な場合は`root`をアンコメントします.\n\n### 記事をgithub pagesに反映\nここまでの設定を終えて, 記事を書いたら`./ink publish`を実行します. これで, github pages上のブログにアクセスできるようになっているはずです\n\n---\n\ninkpaperとgithub pagesの使い方はざっとこんな感じです.\n\ninkpaperに関する日本語の記事があんまりないのが悲しいです. 日本で使ってる人が増えたらいいな. 🐘\n","cover":"","link":"2016/06/05.html","preview":"inkppaerでブログを生成して, github pagesにアップロードするまで","title":"inkpaperとgithub pagesの使い方"},{"content":"\n\n## ブログを静的サイトにするわけ\nブログをやっていて, サイトに変更が必要なシーンは以下のとおりです.\n\n- 新しい記事を書いた時\n- コメントがついた時\n- トラックバックがあった時\n\nたったこれだけ. しかも, コメントはsnsで代用できるし, トラックバックは廃れてるから不要です. となると, サイトに変更が加わるのは新しい記事を書いた時だけということになります. 静的サイトで十分ですよね.\n\n実際にtwitterとかfacebookが普及した頃にwordpressから静的サイトジェネレータに移行しましたっていうのが流行ってました.\n\n静的サイトジェネレータとか静的ブログジェネレータの類が, 今回のinkpaperにあたります.\n\n## [inkpaper](https://github.com/inkproject/ink)とは\ngo言語で書かれた静的ブログジェネレータです. 今回はこれを使いました.\n\nブログって静的サイトで十分だよね, とは言いつつも新しい記事を書いた時に更新が必要になるページは結構たくさんあります. トップページ, アーカイブのページ, カテゴリのページなど… これらを手作業でするのは面倒すぎます. そういう時に静的サイトジェネレータが必要です.\n\ninkpaperを選んだのは単純にgo言語で書かれてるからっていう理由だけです. たまたま今goを触っているので.\nそれとmarkdownで記事をかけるのが良い感じです.\n\n## ホスティング\n自鯖やvpsでブログをやってた頃があるんですが, ブログの引越は結構面倒くさいんですよねー. それがだるくて今までブログを立てるたびに前のブログの記事が失われていました.\n\nそういうのを防ぐために, 今回は[github pages](https://pages.github.com/)を使いました. サーバの管理とか無いので, ブログが失われることは無いと思います.\n\n## inkpaperとgithub pagesを使ってみた感想\n\n悪く無いと思いますが, 気になることが少なくないです.\n\ninkpaperはちょっとシンプルすぎるかも. analyticsを仕込む機能が無いので, 自分でテンプレートのフッターにトラッキングコードを加えないといけませんでした.\n\nあとuriの構造を自分好みに変更できない. パーマリンクの設定とか無いので, uriは `年/月/日/記事のファイル名.html` となります.\n\n# まとめ\ninkpaperとgithub pagesを使ってブログを立てたことをエントリーにしてみたんですが, 案外気になる点が多かったです. これ長続きしないかもしれないなあ… 🐘\n","cover":"","link":"2016/06/03.html","preview":"go言語製の静的ブログジェネレータ, inkpaperを使います","title":"github pagesとinkpaperでブログを始める"}]